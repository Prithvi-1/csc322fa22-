const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera( 60, window.innerWidth/window.innerHeight, 0.1, 500 );
camera.position.set( 0, 20, 100);
camera.lookAt( 0, 25, 0 );
var renderer = new THREE.WebGLRenderer();
renderer.setSize( window.innerWidth, window.innerHeight );
document.body.appendChild( renderer.domElement );

// side 1  color  - Blue violet

const geometry = new THREE.BufferGeometry();
// create a simple square shape. We duplicate the top left and bottom right
// vertices because each vertex needs to appear once per triangle.
const vertices = new Float32Array( [
	-2.75, 0,  2.75,
	 2.75, 0,  2.75,
	 1.7,  50,  1.7,

	 1.7,  50,  1.7,
	-1.7,  50,  1.7,
  -1.7,  0, 2.75
] );

// itemSize = 3 because there are 3 values (components) per vertex
geometry.setAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
const material = new THREE.MeshBasicMaterial( { color: 0xA020F0 } );
const mesh = new THREE.Mesh( geometry, material );

// side 2  - color - Maroon
const geometry1 = new THREE.BufferGeometry();
const vertices1 = new Float32Array( [
	2.75, 0,  2.75,
	2.75, 0,  -2.75,
	1.7,  50,  -1.7,

	1.7,  50,  -1.7,
	1.7,  50,   1.7,
  1.7,  0 ,  2.75,
] );
geometry1.setAttribute( 'position', new THREE.BufferAttribute( vertices1, 3 ) );
const sidecolor1 = new THREE.Color("hsl(0, 100%, 25%)")
const material1 = new THREE.MeshBasicMaterial( { color: sidecolor1 } );
const mesh1 = new THREE.Mesh( geometry1, material1 );


// side 3 -color - saddle Brown

const geometry2 = new THREE.BufferGeometry();
const vertices2 = new Float32Array( [
   2.75, 0, -2.75,
  -2.75,  0, -2.75,
  -1.7, 50, -1.7,

   -1.7, 50, -1.7,
   1.7, 50, -1.7,
    1.7, 0, -2.75,
] );
geometry2.setAttribute( 'position', new THREE.BufferAttribute( vertices2, 3 ) );
const material2 = new THREE.MeshBasicMaterial( { color:  0x964B00 } );
const mesh2 = new THREE.Mesh( geometry2, material2 );

// side 4 -  color -Blue

const geometry3 = new THREE.BufferGeometry();
const vertices3 = new Float32Array( [
  -2.75,   0, -2.75,
  -2.75,   0,  2.75,
  -1.7, 50,  1.7,
   -1.7, 50,  1.7,
  -1.7, 50, -1.7,
   -1.7, 0 , -2.75,
] );
geometry3.setAttribute( 'position', new THREE.BufferAttribute( vertices3, 3 ) );
const material3 = new THREE.MeshBasicMaterial( { color: 0x0000FF } ); 
const mesh3 = new THREE.Mesh( geometry3, material3 );

// triangle 1 - color - RED 
const geometry4 = new THREE.BufferGeometry();
const vertices4 = new Float32Array( [
    -1.7, 50,  1.7,
     1.7, 50.0,  1.7,
     0, 55,   0,
] );
geometry4.setAttribute( 'position', new THREE.BufferAttribute( vertices4, 3 ) );
const sidecolor4 = new THREE.Color("rgb(255, 0, 0)");
const material4 = new THREE.MeshBasicMaterial( { color: sidecolor4 } );
const mesh4 = new THREE.Mesh( geometry4, material4 );

// triangle 2 -  silver 
const geometry5 = new THREE.BufferGeometry();
const vertices5 = new Float32Array( [ 
    1.7, 50,  1.7,
    1.7, 50, -1.7,
    0, 55,   0,
] );
geometry5.setAttribute( 'position', new THREE.BufferAttribute( vertices5, 3 ) );
const sidecolor5 = new THREE.Color("rgb(75%, 75%, 75%)");
const material5 = new THREE.MeshBasicMaterial( { color:  sidecolor5 } );
const mesh5 = new THREE.Mesh( geometry5, material5 );

//triangle 3 - yellow 
const geometry6 = new THREE.BufferGeometry();
const vertices6 = new Float32Array( [
	1.7, 50, -1.7,
    -1.7, 50, -1.7,
     0, 55,   0,
] );
geometry6.setAttribute( 'position', new THREE.BufferAttribute( vertices6, 3 ) );
const material6 = new THREE.MeshBasicMaterial( { color: 0xFFFF00} );
const mesh6 = new THREE.Mesh( geometry6, material6 );

// triangle 4 - color Green 
const geometry7 = new THREE.BufferGeometry();
const vertices7 = new Float32Array( [
	 -1.7, 50, -1.7,
   -1.7, 50,  1.7,
     0, 55,   0,
] );
geometry7.setAttribute( 'position', new THREE.BufferAttribute( vertices7, 3 ) );
const sidecolor7 = new THREE.Color("hsl(120, 100%, 25%)");  
const material7 = new THREE.MeshBasicMaterial( { color: sidecolor7 } );
const mesh7 = new THREE.Mesh( geometry7, material7 );
scene.add( mesh );	
scene.add( mesh1);
scene.add( mesh2 );
scene.add( mesh3 );
scene.add( mesh4 );
scene.add( mesh5 );
scene.add( mesh6 );
scene.add( mesh7 );
camera.position.z = 90;

var animate = function () {
	requestAnimationFrame( animate );

	mesh.rotation.y += 0.01;
  mesh1.rotation.y += 0.01;
  mesh2.rotation.y += 0.01;
  mesh3.rotation.y += 0.01;
  mesh4.rotation.y += 0.01;
  mesh5.rotation.y += 0.01;
  mesh6.rotation.y += 0.01;
  mesh7.rotation.y += 0.01;
    

	renderer.render( scene, camera );
};

animate();
